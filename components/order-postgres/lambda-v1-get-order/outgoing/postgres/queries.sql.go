// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package postgres

import (
	"context"
)

const findOrderByOrderId = `-- name: FindOrderByOrderId :one
SELECT order_id, customer_id, workflow, status, created_at, modified_at
FROM order_service.order
WHERE order_id = $1
`

func (q *Queries) FindOrderByOrderId(ctx context.Context, orderID string) (OrderServiceOrder, error) {
	row := q.db.QueryRow(ctx, findOrderByOrderId, orderID)
	var i OrderServiceOrder
	err := row.Scan(
		&i.OrderID,
		&i.CustomerID,
		&i.Workflow,
		&i.Status,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const findOrderItemsByOrderId = `-- name: FindOrderItemsByOrderId :many
SELECT order_item_id, order_id, name, created_at, modified_at
FROM order_service.order_item
WHERE order_id = $1
`

func (q *Queries) FindOrderItemsByOrderId(ctx context.Context, orderID string) ([]OrderServiceOrderItem, error) {
	rows, err := q.db.Query(ctx, findOrderItemsByOrderId, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderServiceOrderItem
	for rows.Next() {
		var i OrderServiceOrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
