// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findAllOrders = `-- name: FindAllOrders :many
SELECT order_id, customer_id, workflow, status, created_at, modified_at
FROM order_service.order
ORDER BY created_at
OFFSET $1 LIMIT $2
`

type FindAllOrdersParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) FindAllOrders(ctx context.Context, arg FindAllOrdersParams) ([]OrderServiceOrder, error) {
	rows, err := q.db.Query(ctx, findAllOrders, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderServiceOrder
	for rows.Next() {
		var i OrderServiceOrder
		if err := rows.Scan(
			&i.OrderID,
			&i.CustomerID,
			&i.Workflow,
			&i.Status,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrderItemsByOrderIds = `-- name: FindOrderItemsByOrderIds :many
SELECT order_item_id, order_id, name, created_at, modified_at
FROM order_service.order_item
WHERE order_id = ANY ($1::varchar[])
`

func (q *Queries) FindOrderItemsByOrderIds(ctx context.Context, orderIds []string) ([]OrderServiceOrderItem, error) {
	rows, err := q.db.Query(ctx, findOrderItemsByOrderIds, orderIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderServiceOrderItem
	for rows.Next() {
		var i OrderServiceOrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrdersByCustomerId = `-- name: FindOrdersByCustomerId :many
SELECT order_id, customer_id, workflow, status, created_at, modified_at
FROM order_service.order
WHERE customer_id = $1
ORDER BY created_at
OFFSET $2 LIMIT $3
`

type FindOrdersByCustomerIdParams struct {
	CustomerID pgtype.UUID
	Offset     int32
	Limit      int32
}

func (q *Queries) FindOrdersByCustomerId(ctx context.Context, arg FindOrdersByCustomerIdParams) ([]OrderServiceOrder, error) {
	rows, err := q.db.Query(ctx, findOrdersByCustomerId, arg.CustomerID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderServiceOrder
	for rows.Next() {
		var i OrderServiceOrder
		if err := rows.Scan(
			&i.OrderID,
			&i.CustomerID,
			&i.Workflow,
			&i.Status,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
